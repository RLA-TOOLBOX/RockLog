import os
import subprocess
import time
import requests
from flask import Flask, request
from colorama import Fore, Style, init
import platform

TOKEN_FILE = os.path.expanduser("~/.ngrok_token")
LOG_FILE = os.path.expanduser("~/.ip_log.txt")

app = Flask(__name__)

def install_ngrok_on_termux():
    """Install Ngrok in Termux."""
    subprocess.run(["pkg", "install", "ngrok", "-y"], check=True)

def install_ngrok_on_arch():
    """Install Ngrok on Arch Linux."""
    subprocess.run(["sudo", "pacman", "-S", "ngrok", "--noconfirm"], check=True)

def install_ngrok_on_mac():
    """Install Ngrok on macOS using Homebrew."""
    subprocess.run(["brew", "install", "ngrok"], check=True)

def install_ngrok_on_debian():
    """Install Ngrok on Debian or Kali Linux using apt."""
    subprocess.run(["sudo", "apt", "update"], check=True)
    subprocess.run(["sudo", "apt", "install", "ngrok", "-y"], check=True)

def check_ngrok():
    """Check if Ngrok is installed, and install it if necessary."""
    platform_name = platform.system().lower()
    
    if subprocess.run(["which", "ngrok"], capture_output=True).returncode != 0:
        print("[!] Ngrok not found! Installing it now...")
        
        if platform_name == "linux":
            # Check if it's Arch Linux
            if os.path.exists("/usr/bin/pacman"):
                install_ngrok_on_arch()
            # Check if it's Termux
            elif os.path.exists("/data/data/com.termux/files/usr/bin/bash"):
                install_ngrok_on_termux()
            # Check if it's Debian or Kali Linux
            elif os.path.exists("/usr/bin/apt"):
                install_ngrok_on_debian()
            else:
                print("Unsupported Linux distribution.")
                exit(1)
        elif platform_name == "darwin":
            install_ngrok_on_mac()
        else:
            print(f"[!] Unsupported platform: {platform_name}")
            exit(1)

def get_ngrok_token():
    """Get the Ngrok auth token."""
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "r") as f:
            return f.read().strip()
    
    token = input("Enter your Ngrok auth token: ").strip()
    
    with open(TOKEN_FILE, "w") as f:
        f.write(token)

    subprocess.run(["ngrok", "config", "add-authtoken", token], check=True)
    return token

def start_ngrok():
    """Start Ngrok and open a tunnel to port 5000."""
    print(f"  {Fore.MAGENTA}[{Fore.YELLOW}*{Fore.MAGENTA}] {Fore.RESET}Starting Ngrok on port {Fore.BLUE}5000{Fore.RED}...{Fore.RESET}")
    
    # Start Ngrok with no web interface, no browser warning, and no console output
    subprocess.Popen(["ngrok", "http", "5000", "--skip-browser-warning", "--disable-web-interface", "--log=stdout", "--no-console", "--bind-tls=true"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    time.sleep(5)  # Allow time for Ngrok to start

def get_ngrok_url():
    """Fetch the public URL generated by Ngrok."""
    print("  [*] Fetching Ngrok public URL...")
    headers = {
        'User-Agent': 'CustomUserAgent/1.0',  # Custom User-Agent to bypass restrictions
        'ngrok-skip-browser-warning': 'true'  # Skip browser warning
    }

    retries = 10  # Retry up to 10 times if the Ngrok URL isn't fetched
    while retries > 0:
        try:
            response = requests.get("http://127.0.0.1:4040/api/tunnels", headers=headers)
            data = response.json()
            
            if "tunnels" in data and data["tunnels"]:
                public_url = data["tunnels"][0]["public_url"]
                print(f"  {Fore.MAGENTA}[{Fore.GREEN}+{Fore.MAGENTA}] {Fore.RESET}Ngrok Public URL{Fore.RED}: {Fore.LIGHTGREEN_EX}{public_url}{Fore.RESET}")
                return public_url
            else:
                print("  [*] Ngrok tunnel not found yet. Retrying...")
        except requests.exceptions.RequestException as e:
            print(f"Error while fetching the Ngrok URL: {e}")
        
        retries -= 1
        time.sleep(2)  # Wait before retrying
    
    print("  [*] Failed to fetch Ngrok public URL after several attempts.")
    return None

def log_ip(ip, user_agent):
    """Log the visitor's IP address and User-Agent to a file."""
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {ip} - {user_agent}\n")
    print(f"{Fore.RED}-{Fore.RESET}" * 75)
    print(f" {Fore.MAGENTA}[{Fore.GREEN}${Fore.MAGENTA}]{Fore.CYAN} Logged IP{Fore.RED}:{Fore.GREEN} {ip}{Fore.RESET}")
    print(f"{Fore.RED}-{Fore.RESET}" * 75)

@app.route("/", methods=["GET"])
def home():
    """Home route that logs visitor IP and User-Agent."""
    forwarded_for = request.headers.get("X-Forwarded-For")
    if forwarded_for:
        client_ip = forwarded_for.split(",")[0]
    else:
        client_ip = request.remote_addr
    
    user_agent = request.headers.get("User-Agent")
    
    log_ip(client_ip, user_agent)  # Log IP and User-Agent
    return "  IP LOGGED BY REDLOCK AGENCY!"

def main():
    """Main function to run the server and Ngrok."""
    check_ngrok()
    token = get_ngrok_token()
    start_ngrok()
    
    ngrok_url = get_ngrok_url()
    
    if ngrok_url:
        # Hit the URL once to capture the IP
        headers = {
            "User-Agent": "CustomUserAgent/1.0",
            "ngrok-skip-browser-warning": "true"
        }
        try:
            # Immediately request the Ngrok URL to log the IP
            requests.get(ngrok_url, headers=headers)
            #print(f"  [*] Initial visit to {ngrok_url} logged successfully!")
        except Exception as e:
            print(f"  [!] Error during initial visit logging: {e}")
    
    # Start Flask web server
    app.run(host="127.0.0.1", port=5000)  # Start Flask app on all addresses

if __name__ == "__main__":
    main()
